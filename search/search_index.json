{"docs":[{"location":"/paradox.json","text":"","title":""},{"location":"/index.html","text":"","title":"Java JSON Parser"},{"location":"/index.html#java-json-parser","text":"This Java library provides a JSON parser. The parser reads a JSON text, parses it in accordance with RFC 8259 and creates a corresponding data structure with Java objects.\nThe main feature of this library is that it keeps the original JSON text information in the Java objects. Therefore, for example, your application can show where exactly (line number & column number) the JSON text has a problem if there is a semantic error.","title":"Java JSON Parser"},{"location":"/index.html#setup","text":"Add the following dependency to your build file:\nMaven <dependency>\n  <groupId>com.github.tnakamot</groupId>\n  <artifactId>json-parser</artifactId>\n  <version>0.0.6-SNAPSHOT</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.github.tnakamot', name: 'json-parser', version: '0.0.6-SNAPSHOT'\n} sbt libraryDependencies += \"com.github.tnakamot\" % \"json-parser\" % \"0.0.6-SNAPSHOT\"","title":"Setup"},{"location":"/index.html#usage","text":"Import the following packages in your Java source code.\nimport com.github.tnakamot.json.JSONText;\nimport com.github.tnakamot.json.value.*;\nThen, instantiate JSONText and call parse().\nJSONText jsText = JSONText.fromString(\n        \" { \\\"key1\\\": true, \" +\n        \"   \\\"key2\\\": false,\" +\n        \"   \\\"key3\\\": null } \");\nJSONValue root = jsText.parse();\nThe root JSON value can be obtained as an instance of JSONValue.\nTypically, the type of the root JSON value is “object”. Check the type of the root value, and cast it to JSONValueObject. Then, you will be able to get values as shown below.\nif (root.type() == JSONValueType.OBJECT) {\n    JSONValueObject rootObject = (JSONValueObject) root;\n    JSONValue value1 = rootObject.get(\"key1\");\n    JSONValue value2 = rootObject.get(\"key2\");\n    JSONValue value3 = rootObject.get(\"key3\");\n}","title":"Usage"},{"location":"/types.html","text":"","title":"Types"},{"location":"/types.html#types","text":"JSONValue is an abstract class and the realization of JSON value is done by child classes. The type of the JSON value can be obtained by calling type(). Depending on the returned type, the instance of JSONValue can be safely casted in a dedicated class. The table below shows the correspondence between the type and the class.\nType Class NULL JSONValueNull BOOLEAN JSONValueBoolean STRING JSONValueString NUMBER JSONValueNumber ARRAY JSONValueArray OBJECT JSONValueObject\nThe following sections explain the details of each type.","title":"Types"},{"location":"/types.html#null","text":"JSONValueNull has no value.","title":"null"},{"location":"/types.html#boolean","text":"JSONValueBoolean holds a boolean value. Call value() to extract the boolean value.","title":"boolean"},{"location":"/types.html#string","text":"JSONValueString holds an unescaped string value. Call value() to extract the String value.","title":"string"},{"location":"/types.html#number","text":"JSONValueNumber holds a number value as String. Because no Java class in the standard Java library cannot represent all possible numeric values that the JSON number notation can express. For example, JSON allows an extremely large value like 1E100000 or an extremely precise value like 3.14159265358979323846264338327950288. No standard Java class or primitives cannot represent those values without loosing information. Therefore, JSONValueNumber holds the text that represents the number as it appears in the JSON text.\nYou can call toDouble() or toLong() to get a corresponding Java primitive value.","title":"number"},{"location":"/types.html#array","text":"JSONValueArray holds an ordered sequence of JSONValue. It implements List interface, so all values can be iterated using for statement, for example.\nJSONText jsText = JSONText.fromString(\" [ true, false, \\\"abc\\\", 1.52, null ] \");\nJSONValue root = jsText.parse();\n\nif (root.type() == JSONValueType.ARRAY) {\n    JSONValueArray rootArray = (JSONValueArray) root;\n\n    for (JSONValue jsonValue : rootArray) {\n        ...\n    }\n}\nNote Instances of JSONValueArray are immutable. All methods of List interface that may change the list contents like add() result in UnsupportedOperationException.","title":"array"},{"location":"/types.html#object","text":"JSONValueObject holds a key-value map. It implements Map interface. The class of the key is JSONValueString and that of the value is JSONValue. All key-value pairs can be iterated as shown below.\nJSONText jsText = JSONText.fromString(\n    \" { \\\"key1\\\": true, \" +\n    \"   \\\"key2\\\": false,\" +\n    \"   \\\"key3\\\": null } \");\nJSONValue root = jsText.parse();\n\nif (root.type() == JSONValueType.OBJECT) {\n    JSONValueObject rootObj = (JSONValueObject) root;\n\n    for (Map.Entry<JSONValueString, JSONValue> entry: rootObj.entrySet()) {\n        JSONValueString key = entry.getKey();\n        JSONValue value = entry.getValue();\n        ...\n    }\n}\nNote Instances of JSONValueObject are immutable. All methods of Map interface that may change the contents like put() result in UnsupportedOperationException.","title":"object"},{"location":"/json_source.html","text":"","title":"Load JSON text from various sources"},{"location":"/json_source.html#load-json-text-from-various-sources","text":"JSON text can be loaded from various sources.","title":"Load JSON text from various sources"},{"location":"/json_source.html#local-file","text":"JSONText jsText = JSONText.fromFile(new File(\"/path/to/file.json\"));","title":"Local file"},{"location":"/json_source.html#url","text":"JSONText jsText = JSONText.fromURL(new URL(\"http://example.jp/test.json\"))","title":"URL"},{"location":"/json_source.html#string","text":"JSONText jsText = JSONText.fromString(\n        \" { \\\"key1\\\": true, \" +\n        \"   \\\"key2\\\": false,\" +\n        \"   \\\"key3\\\": null } \");\nThe advantage of this library is to keep the information about where the JSON was obtained from like URL. Therefore, it is not recommended to load JSON text from String because the library cannot know where the JSON text comes from.","title":"String"},{"location":"/source_info.html","text":"","title":"JSON source information"},{"location":"/source_info.html#json-source-information","text":"The advantage of this library is that each primitive JSON value hold where it is originated from. To obtain that information, call token().\nJSONValueString jsStr = ...;\nJSONToken token = jsStr.token();\nAn instance of JSONTOken holds following information.\nbegginingLocation() returns an object which holds the line and column number of the first character of this JSON value within the JSON text. endLocation() returns an object which holds the line and column number of the character after the last character of this JSON value within the JSON text. source() returns an instance of JSONText from which this JSON value was extracted. JSONText#name() holds the short name (i.e. file name) of the JSON text. JSONText#fullName() holds the full name (i.e. URL or full path) of the JSON text. The above methods do not make sense if the JSON text was loaded from String.","title":"JSON source information"},{"location":"/source.html","text":"","title":"Source Code"},{"location":"/source.html#source-code","text":"The source code of this library is available at GitHub.","title":"Source Code"},{"location":"/javadoc.html","text":"","title":"Javadoc"},{"location":"/javadoc.html#javadoc","text":"Javadoc of the latest version is available here.\nJavadoc of old versions is available as jar files in Maven Repository. For example, the javadoc jar file of version 0.0.4 can be found here.","title":"Javadoc"}]}